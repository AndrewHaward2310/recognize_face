# Form implementation generated from reading ui file '.\resigter.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
import os
import datetime


class Ui_RegisterWindow(object):
    def setupUi(self, RegisterWindow, callback=None):
        RegisterWindow.setObjectName("RegisterWindow")
        RegisterWindow.resize(513, 262)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        RegisterWindow.setFont(font)
        RegisterWindow.setStyleSheet("background-color: rgb(170, 170, 127);")
        self.centralwidget = QtWidgets.QWidget(parent=RegisterWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70, 39, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.nameLog = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.nameLog.setGeometry(QtCore.QRect(200, 39, 241, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.nameLog.setFont(font)
        self.nameLog.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.nameLog.setObjectName("nameLog")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(70, 119, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.sexBog = QtWidgets.QComboBox(parent=self.centralwidget)
        self.sexBog.setGeometry(QtCore.QRect(200, 120, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.sexBog.setFont(font)
        self.sexBog.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.sexBog.setObjectName("sexBog")
        self.sexBog.addItem("")
        self.sexBog.addItem("")
        self.registerBtn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.registerBtn.setGeometry(QtCore.QRect(170, 190, 181, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.registerBtn.setFont(font)
        self.registerBtn.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.registerBtn.setObjectName("registerBtn")
        self.registerBtn.clicked.connect(lambda: self.handleRegister(callback))
        RegisterWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=RegisterWindow)
        self.statusbar.setObjectName("statusbar")
        RegisterWindow.setStatusBar(self.statusbar)

        self.retranslateUi(RegisterWindow)
        QtCore.QMetaObject.connectSlotsByName(RegisterWindow)

    def retranslateUi(self, RegisterWindow):
        _translate = QtCore.QCoreApplication.translate
        RegisterWindow.setWindowTitle(_translate("RegisterWindow", "Register"))
        self.label.setText(_translate("RegisterWindow", "HỌ VÀ TÊN"))
        self.label_2.setText(_translate("RegisterWindow", "GIỚI TÍNH"))
        self.sexBog.setItemText(0, _translate("RegisterWindow", "Nam"))
        self.sexBog.setItemText(1, _translate("RegisterWindow", "Nữ"))
        self.registerBtn.setText(_translate("RegisterWindow", "ĐĂNG KÝ"))

    def handleRegister(self, callback):
        name = self.nameLog.text()
        sex = self.sexBog.currentText()
        register_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # Save to users.xlsx
        new_data = pd.DataFrame([[name, sex, register_time]], columns=["Name", "Sex", "RegisterTime"])
        if not os.path.exists("users.xlsx"):
            new_data.to_excel("users.xlsx", index=False)
            user_id = 0
        else:
            old_data = pd.read_excel("users.xlsx")
            user_id = old_data.shape[0]  # next index
            combined = pd.concat([old_data, new_data], ignore_index=True)
            combined.to_excel("users.xlsx", index=False)

        # Notify main window to start capturing 100 images with user_{ID}
        if callback:
            callback(user_id)

        # Close the register window
        self.centralwidget.parent().close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    RegisterWindow = QtWidgets.QMainWindow()
    ui = Ui_RegisterWindow()
    ui.setupUi(RegisterWindow)
    RegisterWindow.show()
    sys.exit(app.exec())
